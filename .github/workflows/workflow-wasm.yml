name: Workflow - Tests on wasm

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      gitref:
        required: true
        type: string
      pixeleagle_project:
        required: true
        type: string
      branch:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      repository:
        required: true
        type: string
      gitref:
        required: true
        type: string
      pixeleagle_project:
        required: true
        type: string
        default: 'B25A040A-A980-4602-B90C-D480AB84076D'
      branch:
        required: true
        type: string

jobs:
  wasm-run:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: "macos-14"
            browser: "chromium"
            api: "webgpu"
          - runner: "ubuntu-22.04"
            browser: "firefox"
            api: "webgl2"
          # works, but text is buggy
          # - runner: "ubuntu-latest"
          #   browser: "chromium"
          #   api: "webgl2"
          # doesn't work but should, don't know why
          # - runner: "macos-14"
          #   browser: "chromium"
          #   api: "webgl2"
          # - runner: "macos-14"
          #   browser: "webkit"
          #   api: "webgl2"
          # - runner: "macos-14"
          #   browser: "firefox"
          #   api: "webgl2"
          # doesn't work for now, that's expected
          # - runner: "macos-14"
          #   browser: "webkit"
          #   api: "webgpu"
          # - runner: "macos-14"
          #   browser: "firefox"
          #   api: "webgpu"
          # - runner: "ubuntu-latest"
          #   browser: "firefox"
          #   api: "webgpu"
          # - runner: "ubuntu-latest"
          #   browser: "chromium"
          #   api: "webgpu"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.gitref }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown  
  
      - name: install xvfb, llvmpipe and lavapipe
        if: runner.os == 'linux'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:kisak/turtle -y || FAILED=true
          # retry as it sometimes timeout
          if [ $FAILED ]; then
            sleep 5
            sudo add-apt-repository ppa:kisak/turtle -y || FAILED=true
            if [ $FAILED ]; then
                  sleep 5
                  sudo add-apt-repository ppa:kisak/turtle -y
            fi
          fi
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: Install wasm-bindgen
        run: cargo install --force wasm-bindgen-cli

      - name: Setup playwright
        run: |
          cd .github/start-wasm-example
          npm install
          # update playwright to get the latest browsers
          npm install -D @playwright/test@latest
          npx playwright install --with-deps
          cd ../..

      - name: Run examples
        if: runner.os == 'linux'
        shell: bash
        run: |
          # start a webserver
          python3 -m http.server --directory examples/wasm &

          xvfb-run cargo run -p build-wasm-example -- --browsers ${{ matrix.browser }} --api ${{ matrix.api }} --frames 25 --test 2d_shapes testbed_ui bloom_2d atmospheric_fog pbr split_screen

      - name: Run examples
        if: runner.os == 'macos'
        shell: bash
        run: |
          # start a webserver
          python3 -m http.server --directory examples/wasm &

          cargo run -p build-wasm-example -- --browsers ${{ matrix.browser }} --api ${{ matrix.api }} --frames 25 --test 2d_shapes testbed_ui bloom_2d atmospheric_fog pbr split_screen

      - name: Save screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-wasm-${{ matrix.browser }}-${{ matrix.api }}-${{ runner.os }}
          path: .github/start-wasm-example/screenshot-*.png
    
      - name: Send to Pixel Eagle
        run: |
          run=`curl https://pixel-eagle.com/${{ inputs.pixeleagle_project }}/runs -H 'Content-Type: application/json' -d '{"api":"${{ matrix.api }}", "browser": "${{ matrix.browser }}", "os":"wasm", "gitref": "${{ inputs.gitref }}", "host-os": "${{ runner.os }}", "branch": "${{ inputs.branch }}"}' --oauth2-bearer ${{ secrets.PIXELEAGLE }} | jq '.id'`
            
          SAVEIFS=$IFS
          
          IFS=$'\n'

          cd .github/start-wasm-example

          # Build a json array of screenshots and their hashes
          hashes='[';
          for screenshot in $(find . -type f -maxdepth 1 -name "*.png");
          do
            name=${screenshot:2}
            name=`echo $name | sed 's/.*-\(.*\)-.*/\1/'`
            echo $name
            hash=`shasum -a 256 $screenshot | awk '{print $1}'`
            hashes="$hashes [\"$name\",\"$hash\"],"
          done
          hashes=`echo $hashes | rev | cut -c 2- | rev`
          hashes="$hashes]"
          
          IFS=$SAVEIFS          

          # Upload screenshots with unknown hashes
          curl https://pixel-eagle.com/${{ inputs.pixeleagle_project }}/runs/$run/hashes -H 'Content-Type: application/json' -d "$hashes" --oauth2-bearer ${{ secrets.PIXELEAGLE }} | jq '.[]|[.name] | @tsv' |
            while IFS=$'\t' read -r name; do
              name=`echo $name | tr -d '"'`
              echo "Uploading $name"
              curl https://pixel-eagle.com/${{ inputs.pixeleagle_project }}/runs/$run/screenshots -F "data=@./screenshot-$name-${{ matrix.browser }}.png" -F "screenshot=$name" --oauth2-bearer ${{ secrets.PIXELEAGLE }}
              echo
            done
          
          IFS=$SAVEIFS

          curl https://pixel-eagle.com/${{ inputs.pixeleagle_project }}/runs/$run/compare/auto -H 'Content-Type: application/json' -d '{"api":"<equal>", "browser":"<equal>", "host-os":"<equal>", "branch": "main"}' --oauth2-bearer ${{ secrets.PIXELEAGLE }}
